# Однострочный комментарий

'''
Многострочный коммент
'''


"""
Многострочный коммент
"""


"""1. Переменная - поименованная область опер. памяти
данные из которой можно прочитать или в которую их можно записать

PEP-8 почитать, как оформлять код
"""


username = 'root'  # присвоить значение переменной
print(username)

username = 'toor' # присвоить новое значение
print(username)


# Какие типы данных существуют в python
"""
Тип данных переменной является ее характеристикой
и описывает следующее:
- кол-во памяти
- диапазон допустимых значений
- доустимые операции
- формат отображения (для человека)

1. Простые (скалярные типы данных)
- в один момент времени хранят одно значение
    - int       - целое число
    - float     - число с плавающей точкой
    - bool      - логическое значение
    - complex   - комлексное число
    - str       - строка
    - bytes     - only Py3  - байтовая строка

2. Структурные (составный, сложные) типы данных
- в один момент времени хранят
  любое кол-во значений любого типа
    - tuple     - кортеж
    - list      - список
    - set       - множество
    - dict      - словарь
    - object    - объекты

3. Специальные типы данных
    - None      - пустот, отсутствие значения

"""
a = None

# bool      - логическое значение
flag1 = True
flag2 = False

# int       - целое число
i1 = 666    # десятичное
i2 = 0b10101 # двоичное
i3 = 0o755  # восьмиричная система
i4 = 0xaf   # шестнадцетеричная ситема

# float
f1 = 1.23
f2 = 1e-3  # 0.001
f3 = 1e6   # 1000000.0

# complex
c1 = 3.14j


# str
s1 = 'str"ing'
s2 = "str\"ing"
s3 = '''Много"строчн'ая строка
   sdafjhdsjfjk
'''
print(s3)

s4 = """ Много"строчн'ая строка
   sdafjhdsjfjk
   """
print(s4)

s5 = r'^\d+$'   # сырая строка
s6 = u'Unicode in Python 2'

# bytes

s7 = b'Hello'
print(s7)

# tuple (кортеж) изменять и дополнять кортеж нельзя
t1 = (1, 1.5, True,'string', (1, 2, 3))

print(t1[3])

t2 = (546,) # кортеж из одного элемента

# list - списки
l1 = [[5], 4]
print(l1[0][0])
l1[0] = False
print(l1)


# set - множества  - не индексируются и они уникальны и упорядочены, 10 единиц возратят одно значение
s1 = {1, 1, 2, 4, 6, 'gg', 'gg'}
print(s1)

s2 = set() # пустое множество

# dicts - словари
d1 = {}
d1 = {'id': 1,
      'name': 'Lines',
      'is_developer': True,
      'skills': ('C++', 'Linux')}
print(d1['id'])
print(d1['name'])

d1['any'] = 123
print(d1)



# Как определить тип данных переменной
print(type(d1))


# Как выполнить явное приведение переменной к типу
i = '878'
i = int(i)
print(i, type(i))

# Типы данных бывают изменяемые и неизменяемые
# immutable (неизмняемые)
"""
- bool, int, float, str, complex, bytes, tuple
"""
# mutable (изменяемые)
"""
- list, dict, set, object
"""



# Какие операторы существуют в Python
"""
Операторы делают операции над переменными

Арифметические: + - * /  %(остаток от деления)  **  //(получение целой части от деления

Сравнения: == != <> < > >= <=  возвращают логическое значение True False

Присваивания: = += -= *= %= **= //=

Логические:  and or not
X  |  Y  | and | or | not | XOR(^)-тильда побитовая
0     0     0    0    1      0
0     1     0    1    1      1
1     0     0    1    0      1
1     1     1    1    0      0

Побитовые:  &-и  |-или  ~  ^   <<   >>

Принадлежности:  in   not in   

Тождественности: is   not is

"""


# Ветвление
a = 1
b = 2
if a < b:
    print('a < b')
elif a == b:
    print('a == b')
elif a is b:
    pass   #  пустой блок кода
else:
    print('a > b')


# Тернарный оператор
if True:
    username = 'Вася'
else:
    username = 'Петя'
       # тоже самое:
username = 'Вася' if True else 'Петя'




# Циклы
i = 10
while i:  # станет 0
    print(i)
    i -= 1


i = 0
while True: # while 1:
    if i % 2:
        print(i)

    if i == 10:
        break  # завершение мгновенное
    i += 1

i = 1
while 1:  # while 1:
    i += 1
    if i % 2:
        continue # пропускает одну итерацию

    print(i)
    if i == 10:
        break  # завершение мгновенное
    i += 1



for i in range(8,20,2):
    print('Элемент списка', i)



for i in enumerate(range(8,20,2)):  # пронумеровывает последовательность
    print('Элемент списка', i)

for key, value in enumerate(range(8,20,2)):  # пронумеровывает последовательность
    print(key, value)

a = (1, 2, 3)
b = (4, 5, 6)
a, b = b, a
print(a)
print(b)
####################

for i in d1:
    print(i)

for i in d1.items():
    print(i)

for key, value in d1.items():
    print(key, value)




# Срезы
s = 'Hello Python'
print(s[3:7])
print(s[:7])
print(s[7:])
print(s[::2])
print(s[::-1])
print(s[::-2])
print(s[-1:])
print(s[-7:-1])
print(s[-7:-1:1])

# Списки
l = [1, 2, 3, 4]
l1 = list(range(10))
print(l1)
print(l[::-1])

l2 = l1[::]
print(l1 == l2)
print(l1 is l2)
print(l1[::2])


"""
Функции и методы списков
len(l) - длина списка l
l.append(e)      - добавить элемент в конец
l.insert(index, e) - добавить в указанную позицию

"""

lst = list(range(10))
print('Длина списка :', len(lst))
lst.append(10)
lst.insert(0, -1)
lst.insert(1000, -1)

# неправильно
s = ''
for c in range(ord('a'), ord('z') + 1):
    s += chr(c)
print(c)

# правильно
s = []
for c in range(ord('a'), ord('z') + 1):
    s.append(chr(c))
print(''.join(s))
print(', '.join(s))


# Методы строк - дома

